generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Ürün tablosu
model Product {
  id            Int      @id @default(autoincrement())
  modelNo       String   @unique
  name          String
  materialTypeId Int?
  materialType  MaterialType? @relation(fields: [materialTypeId], references: [id])
  groupId       Int?
  group         Group?        @relation(fields: [groupId], references: [id])
  taxRateId     Int?
  taxRate       TaxRate?      @relation(fields: [taxRateId], references: [id])
  description   String?
  image         String?
  createdAt     DateTime @default(now())
}

// Malzeme türü tablosu
model MaterialType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[] // Ters ilişki
  createdAt DateTime @default(now())
}

// Grup tablosu
model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[] // Ters ilişki
  createdAt DateTime @default(now())
}

// Vergi oranı tablosu
model TaxRate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[] // Ters ilişki
  createdAt DateTime @default(now())
}

// Kumaş tipi tablosu
model FabricType {
  id      Int           @id @default(autoincrement())
  name    String
  entries FabricEntry[] // ters ilişki
}

// Renk tablosu
model Color {
  id      Int           @id @default(autoincrement())
  name    String
  entries FabricEntry[] // ters ilişki
}

// Kesim masası tablosu
model CuttingTable {
  id    Int          @id @default(autoincrement())
  name  String
  exits FabricExit[] // FabricExit ile ilişki
}

// Kumaş giriş tablosu
model FabricEntry {
  id            Int          @id @default(autoincrement())
  fabricTypeId  Int
  fabricType    FabricType   @relation(fields: [fabricTypeId], references: [id])
  colorId       Int
  color         Color        @relation(fields: [colorId], references: [id])
  quantityKg    Float
  lengthMeter   Float?
  entryDate     DateTime     @default(now())
  fabricExits   FabricExit[] @relation("FabricEntryToFabricExit") // Ters ilişki
}

// Kumaş çıkış tablosu
model FabricExit {
  id                Int           @id @default(autoincrement())
  modelNo           String
  orderNo           String
  customerId        String
  layerCount        Int           @default(1)
  productWeightKg   Float         @default(0)
  productLengthMeter Float        @default(0)
  grammage          Float         @default(0)
  externalProductId String?
  unitType          String
  fabricType        String?
  color             String?
  cuttingTable      CuttingTable  @relation(fields: [cuttingTableId], references: [id])
  cuttingTableId    Int
  createdAt         DateTime      @default(now())
  fabricEntry       FabricEntry?  @relation(fields: [fabricEntryId], references: [id])
  fabricEntryId     Int?
}

// Kullanıcı tablosu (JWT için)
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   // hash'li saklanacak
  role      Role     @default(OPERATOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  OPERATOR
}

// Müşteri tablosu
model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
}

// Kumaş Kartı
model Fabric {
  id            Int      @id @default(autoincrement())
  code          String?  @unique
  name          String
  property      String?
  width         Float?
  length        Float?
  depot         String?
  unit          String?
  stockQuantity Float    @default(0)
  createdAt     DateTime @default(now())
}